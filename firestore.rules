/**
 * @fileoverview Firestore Security Rules for SnakeWolf website.
 *
 * Core Philosophy:
 * This ruleset provides public read access to all data collections
 * ("news_articles", "work_items", "creator_items") while restricting
 * write access to prevent unauthorized modifications. This configuration
 * is suitable for a content-driven website where data is primarily managed
 * through a separate administrative interface.
 *
 * Data Structure:
 * The Firestore database consists of three top-level collections:
 *   - /news_articles/{newsArticleId}: Stores news article data.
 *   - /work_items/{workItemId}: Stores portfolio work item data.
 *   - /creator_items/{creatorItemId}: Stores creator information.
 *
 * Key Security Decisions:
 * - Public Read Access: All users, including unauthenticated users, can read
 *   data in all collections. This is enabled by the `allow get, list: if true;` rule.
 * - Restricted Writes: All write operations (create, update, delete) are
 *   explicitly denied. This is enforced by the `allow create, update, delete: if false;` rule.
 *   This is a security-first approach appropriate for the prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles, but restricts write access.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Any user can read news articles.
     * @deny (create, update, delete) No user can create, update, or delete news articles through the client.
     * @principle Allows public reads and restricts writes for content management.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to work items, but restricts write access.
     * @path /work_items/{workItemId}
     * @allow (get, list) Any user can read work items.
     * @deny (create, update, delete) No user can create, update, or delete work items through the client.
     * @principle Allows public reads and restricts writes for content management.
     */
    match /work_items/{workItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to creator items, but restricts write access.
     * @path /creator_items/{creatorItemId}
     * @allow (get, list) Any user can read creator items.
     * @deny (create, update, delete) No user can create, update, or delete creator items through the client.
     * @principle Allows public reads and restricts writes for content management.
     */
    match /creator_items/{creatorItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}