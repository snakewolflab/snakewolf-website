/**
 * @fileOverview Firestore Security Rules for SnakeWolf Website
 *
 * Core Philosophy:
 * This ruleset prioritizes public read access for most content collections
 * (`news_articles`, `tags`, `media_items`, `creators`, `works`) to allow
 * unauthenticated users to freely browse the site. Write access is restricted
 * to authenticated users, primarily for submitting contact form submissions.
 *
 * Data Structure:
 * The Firestore database consists of several top-level collections, each
 * representing a specific data entity. There is no user-specific data or
 * subcollections.
 *
 * Key Security Decisions:
 * - Public Read Access: `news_articles`, `tags`, `media_items`, `creators`,
 *   and `works` collections are publicly readable.
 * - Authenticated Writes: Only authenticated users can create documents in the
 *   `contact_form_submissions` collection.
 * - No User Listing: User listing is implicitly disallowed as there is no
 *   user collection.
 * - No Ownership: There is no user-based ownership, so no denormalization is
 *   required.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles, but disallows all writes.
     * @path /news_articles/{newsArticleId}
     * @allow get, list: Always allowed for any user.
     * @deny create, update, delete: Never allowed.
     * @principle Allows public read access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read tags, but disallows all writes.
     * @path /tags/{tagId}
     * @allow get, list: Always allowed for any user.
     * @deny create, update, delete: Never allowed.
     * @principle Allows public read access.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create contact form submissions, but disallows reads and updates/deletes.
     * @path /contact_form_submissions/{contactFormSubmissionId}
     * @allow create: Only allowed for authenticated users.
     * @deny get, list, update, delete: Never allowed.
     * @principle Requires authentication for writes.
     */
    match /contact_form_submissions/{contactFormSubmissionId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }

    /**
     * @description Allows anyone to read media items, but disallows all writes.
     * @path /media_items/{mediaItemId}
     * @allow get, list: Always allowed for any user.
     * @deny create, update, delete: Never allowed.
     * @principle Allows public read access.
     */
    match /media_items/{mediaItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read creators, but disallows all writes.
     * @path /creators/{creatorId}
     * @allow get, list: Always allowed for any user.
     * @deny create, update, delete: Never allowed.
     * @principle Allows public read access.
     */
    match /creators/{creatorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read works, but disallows all writes.
     * @path /works/{workId}
     * @allow get, list: Always allowed for any user.
     * @deny create, update, delete: Never allowed.
     * @principle Allows public read access.
     */
    match /works/{workId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Helper function to determine if a user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}