/**
 * @fileOverview Firestore Security Rules for the SnakeWolf website.
 *
 * Core Philosophy:
 * This ruleset prioritizes public readability for core content (news, tags, media) while restricting write access to authenticated users for specific collections (contact form submissions). There is no concept of user-specific ownership in the data model.
 *
 * Data Structure:
 * The Firestore database is structured with top-level collections for each entity:
 * - /news_articles/{newsArticleId}: News articles, publicly readable.
 * - /tags/{tagId}: Tags for news articles, publicly readable.
 * - /contact_form_submissions/{contactFormSubmissionId}: Contact form submissions, authentication required for write.
 * - /media_items/{mediaItemId}: Media items, publicly readable.
 *
 * Key Security Decisions:
 * - Public Read Access: The `news_articles`, `tags`, and `media_items` collections are designed for public consumption and allow unauthenticated read access.
 * - Authentication Required for Contact Forms: Only authenticated users can submit contact forms to prevent spam.
 * - No User Listing: Listing all users is not supported and is denied by default.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the news_articles collection.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No one can create, update, or delete news articles through the client.
     * @principle Allows public read access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the tags collection.
     * @path /tags/{tagId}
     * @allow (get, list): Any user can read tags.
     * @deny (create, update, delete): No one can create, update, or delete tags through the client.
     * @principle Allows public read access.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the contact_form_submissions collection.
     * @path /contact_form_submissions/{contactFormSubmissionId}
     * @allow (create): Only authenticated users can create contact form submissions.
     * @allow (get, list, update, delete): No one can read, update, or delete contact form submissions through the client.
     * @principle Requires authentication for form submissions.
     */
    match /contact_form_submissions/{contactFormSubmissionId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }

    /**
     * @description Controls access to the media_items collection.
     * @path /media_items/{mediaItemId}
     * @allow (get, list): Any user can read media items.
     * @deny (create, update, delete): No one can create, update, or delete media items through the client.
     * @principle Allows public read access.
     */
    match /media_items/{mediaItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}