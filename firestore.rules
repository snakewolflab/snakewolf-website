/**
 * @fileoverview Firestore Security Rules for SnakeWolf website.
 *
 * Core Philosophy:
 * This ruleset prioritizes public read access for content collections (news articles,
 * work items, and creator items) while restricting write access to authorized users (not yet implemented).
 *
 * Data Structure:
 * The data is organized into three top-level collections: `news_articles`, `work_items`,
 * and `creator_items`. Each document in these collections represents a single content item.
 *
 * Key Security Decisions:
 * - Public read access is granted to all content collections (`news_articles`, `work_items`,
 *   `creator_items`) for both `get` and `list` operations.
 * - Write access to all collections is currently denied, pending the implementation of an
 *   authentication/authorization mechanism.
 * - No schema validation is enforced during this prototyping phase, focusing on access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to news articles while denying write access.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @deny (create, update, delete): No user can create, update, or delete news articles (pending auth implementation).
     * @principle Allows public reads, restricts writes.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to portfolio work items while denying write access.
     * @path /work_items/{workItemId}
     * @allow (get, list): Any user can read work items.
     * @deny (create, update, delete): No user can create, update, or delete work items (pending auth implementation).
     * @principle Allows public reads, restricts writes.
     */
    match /work_items/{workItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to creator items while denying write access.
     * @path /creator_items/{creatorItemId}
     * @allow (get, list): Any user can read creator items.
     * @deny (create, update, delete): No user can create, update, or delete creator items (pending auth implementation).
     * @principle Allows public reads, restricts writes.
     */
    match /creator_items/{creatorItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}