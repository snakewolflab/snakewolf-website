/**
 * @fileoverview Firestore Security Rules for SnakeWolf website.
 *
 * Core Philosophy:
 * This ruleset allows any signed-in user to create news articles, work items and creator items.
 *
 * Data Structure:
 * The database consists of three top-level collections: `news_articles`, `work_items`, and `creator_items`.
 *
 * Key Security Decisions:
 * - All `list` operations are publicly accessible.
 * - Data shape validation is not enforced in this prototype.
 * - Missing ownership field leads to insecure writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the 'news_articles' collection.
     * @path /databases/{database}/documents/news_articles/{newsArticleId}
     * @allow (create) Signed-in user can create news articles.
     * @deny (create) User attempts to create a news article without being signed in.
     * @principle Allows signed-in users to create news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to the 'work_items' collection.
     * @path /databases/{database}/documents/work_items/{workItemId}
     * @allow (create) Signed-in user can create work items.
     * @deny (create) User attempts to create a work item without being signed in.
     * @principle Allows signed-in users to create work items.
     */
    match /work_items/{workItemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to the 'creator_items' collection.
     * @path /databases/{database}/documents/creator_items/{creatorItemId}
     * @allow (create) Signed-in user can create creator items.
     * @deny (create) User attempts to create a creator item without being signed in.
     * @principle Allows signed-in users to create creator items.
     */
    match /creator_items/{creatorItemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    // Helper function to determine if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}