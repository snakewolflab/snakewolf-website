/**
 * @fileoverview Firestore Security Rules for SnakeWolf website.
 *
 * Core Philosophy:
 * This ruleset allows public read access to news articles, work items, and creator items, but restricts write access to authenticated users only.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Stores news articles.
 * - /work_items/{workItemId}: Stores portfolio work items.
 * - /creator_items/{creatorItemId}: Stores creator information.
 *
 * Key Security Decisions:
 * - Public read access for all collections.
 * - Authenticated user required for create, update, and delete operations.
 * - No specific role-based access control implemented in this version.
 * - No listing restrictions.
 *
 * Denormalization for Authorization:
 *  - No specific denormalization required, as write access is based solely on authentication status.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles and restricts write access to authenticated users.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles.
     * @allow (create, update, delete): Authenticated users can create, update, and delete news articles.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete news articles.
     * @principle Allows public read access with authenticated write access.
     */
    match /news_articles/{newsArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to work items and restricts write access to authenticated users.
     * @path /work_items/{workItemId}
     * @allow (get, list): Any user can read work items.
     * @allow (create, update, delete): Authenticated users can create, update, and delete work items.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete work items.
     * @principle Allows public read access with authenticated write access.
     */
    match /work_items/{workItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to creator items and restricts write access to authenticated users.
     * @path /creator_items/{creatorItemId}
     * @allow (get, list): Any user can read creator items.
     * @allow (create, update, delete): Authenticated users can create, update, and delete creator items.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete creator items.
     * @principle Allows public read access with authenticated write access.
     */
    match /creator_items/{creatorItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}