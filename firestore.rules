/**
 * @fileOverview Firestore Security Rules for the SnakeWolf website.
 *
 * Core Philosophy:
 * This ruleset prioritizes public readability for core content (news articles, tags, media items)
 * while requiring authentication for write operations, specifically for contact form submissions.
 *
 * Data Structure:
 * - /news_articles/{newsArticleId}: Stores news articles. Publicly readable.
 * - /tags/{tagId}: Stores tags for news articles. Publicly readable.
 * - /contact_form_submissions/{contactFormSubmissionId}: Stores contact form submissions. Requires authentication to create.
 * - /media_items/{mediaItemId}: Stores media items. Publicly readable.
 *
 * Key Security Decisions:
 * - Public Read Access: The `news_articles`, `tags`, and `media_items` collections are publicly readable to support unauthenticated users.
 * - Authentication Required for Contact Form Submissions: Only authenticated users can create contact form submissions.
 * - No Ownership Model: There is no concept of user-specific ownership for any documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to news articles and requires authentication for writes.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list): Any user can read news articles, regardless of authentication status.
     * @allow (create, update, delete): No one can write to the news_articles collection.
     * @deny (create): An unauthenticated user attempts to create a news article.
     * @principle Allows public read access to news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to tags and requires authentication for writes.
     * @path /tags/{tagId}
     * @allow (get, list): Any user can read tags, regardless of authentication status.
     * @allow (create, update, delete): No one can write to the tags collection.
     * @deny (create): An unauthenticated user attempts to create a tag.
     * @principle Allows public read access to tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Requires authentication to create contact form submissions.
     * @path /contact_form_submissions/{contactFormSubmissionId}
     * @allow (create): An authenticated user creates a contact form submission.
     * @allow (get, list, update, delete): No one can get, list, update, or delete contact form submissions.
     * @deny (create): An unauthenticated user attempts to create a contact form submission.
     * @principle Requires authentication for writing contact form submissions.
     */
    match /contact_form_submissions/{contactFormSubmissionId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }

    /**
     * @description Grants public read access to media items and requires authentication for writes.
     * @path /media_items/{mediaItemId}
     * @allow (get, list): Any user can read media items, regardless of authentication status.
     * @allow (create, update, delete): No one can write to the media_items collection.
     * @deny (create): An unauthenticated user attempts to create a media item.
     * @principle Allows public read access to media items.
     */
    match /media_items/{mediaItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper function to determine if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}