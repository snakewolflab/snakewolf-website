/**
 * @fileoverview Firestore Security Rules for the SnakeWolf website.
 *
 * Core Philosophy:
 * This ruleset prioritizes public read access for certain collections
 * (`news_articles`, `tags`, `media_items`) while restricting write access
 * to authenticated users only for `contact_form_submissions`.
 *
 * Data Structure:
 * The Firestore database contains the following top-level collections:
 * - `/news_articles/{newsArticleId}`: Stores news articles. Publicly readable.
 * - `/tags/{tagId}`: Stores tags for news articles. Publicly readable.
 * - `/contact_form_submissions/{contactFormSubmissionId}`: Stores contact form submissions.
 *   Requires authentication to create.
 * - `/media_items/{mediaItemId}`: Stores media items. Publicly readable.
 *
 * Key Security Decisions:
 * - Public read access is granted to `news_articles`, `tags`, and `media_items`.
 * - Only authenticated users can create `contact_form_submissions`.
 * - Listing of `contact_form_submissions` is denied to all users.
 * - There is no data ownership in this application, so no denormalization is required.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) Any user can read any news article.
     * @deny (create, update, delete) No one can create, update, or delete news articles.
     * @principle Grants public read access.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read tags.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read any tag.
     * @deny (create, update, delete) No one can create, update, or delete tags.
     * @principle Grants public read access.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create contact form submissions.
     * @path /contact_form_submissions/{contactFormSubmissionId}
     * @allow (create) An authenticated user can create a contact form submission.
     * @deny (get, update, delete) No one can get, update, or delete contact form submissions.
     * @deny (list) No one can list contact form submissions.
     * @principle Requires authentication for writes.
     */
    match /contact_form_submissions/{contactFormSubmissionId} {
      allow create: if isSignedIn();
      allow get, update, delete: if false;
      allow list: if false;
    }

    /**
     * @description Allows anyone to read media items.
     * @path /media_items/{mediaItemId}
     * @allow (get, list) Any user can read any media item.
     * @deny (create, update, delete) No one can create, update, or delete media items.
     * @principle Grants public read access.
     */
    match /media_items/{mediaItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}